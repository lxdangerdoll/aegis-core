"""Add conversation_summaries table for async enrichment

Revision ID: 20251019_conv_summaries
Revises: 20251011_baseline_v106
Create Date: 2025-10-19

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20251019_conv_summaries'
down_revision = '20251011_baseline_v106'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """
    Add conversation_summaries table for async background enrichment.
    
    This table stores pre-computed conversation summaries generated by the
    enrichment worker, enabling time-anchored queries like "what did we 
    talk about last week?"
    """
    
    # Create conversation_summaries table
    op.create_table(
        'conversation_summaries',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.String(length=255), nullable=False),
        sa.Column('bot_name', sa.String(length=100), nullable=False),
        
        # Summary content
        sa.Column('summary_text', sa.Text(), nullable=False),
        sa.Column('summary_type', sa.String(length=50), server_default='time_window', nullable=False),
        
        # Time boundaries
        sa.Column('start_timestamp', sa.DateTime(), nullable=False),
        sa.Column('end_timestamp', sa.DateTime(), nullable=False),
        
        # Metadata
        sa.Column('message_count', sa.Integer(), nullable=False),
        sa.Column('key_topics', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('emotional_tone', sa.String(length=50), nullable=True),
        
        # Quality metrics
        sa.Column('compression_ratio', sa.Float(), nullable=True),
        sa.Column('confidence_score', sa.Float(), server_default='0.5', nullable=True),
        
        # Enrichment tracking
        sa.Column('enrichment_version', sa.String(length=20), server_default='v1.0', nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        
        sa.PrimaryKeyConstraint('id'),
        
        # Prevent duplicate summaries for same time window
        sa.UniqueConstraint('user_id', 'bot_name', 'start_timestamp', 'end_timestamp', 
                          name='uq_conversation_summaries_window')
    )
    
    # Create indexes for fast retrieval
    op.create_index('idx_conversation_summaries_user_bot', 'conversation_summaries', 
                   ['user_id', 'bot_name'])
    op.create_index('idx_conversation_summaries_time', 'conversation_summaries', 
                   ['start_timestamp', 'end_timestamp'], postgresql_using='btree')
    op.create_index('idx_conversation_summaries_created', 'conversation_summaries', 
                   ['created_at'], postgresql_using='btree')
    
    # GIN index for topic search (PostgreSQL array)
    op.create_index('idx_conversation_summaries_topics', 'conversation_summaries', 
                   ['key_topics'], postgresql_using='gin')


def downgrade() -> None:
    """
    Remove conversation_summaries table.
    
    WARNING: This will delete all conversation summaries!
    """
    op.drop_index('idx_conversation_summaries_topics', 'conversation_summaries')
    op.drop_index('idx_conversation_summaries_created', 'conversation_summaries')
    op.drop_index('idx_conversation_summaries_time', 'conversation_summaries')
    op.drop_index('idx_conversation_summaries_user_bot', 'conversation_summaries')
    op.drop_table('conversation_summaries')
