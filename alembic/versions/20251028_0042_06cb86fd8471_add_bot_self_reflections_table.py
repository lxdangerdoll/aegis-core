"""add_bot_self_reflections_table

Revision ID: 06cb86fd8471
Revises: 3ec726abae38
Create Date: 2025-10-28 00:42:05.438532+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '06cb86fd8471'
down_revision: Union[str, None] = '3ec726abae38'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Apply migration changes."""
    # Create bot_self_reflections table for hybrid storage of bot learning insights
    op.create_table(
        'bot_self_reflections',
        sa.Column('id', sa.UUID(), nullable=False, server_default=sa.text('gen_random_uuid()')),
        sa.Column('bot_name', sa.String(100), nullable=False, comment='Character name (elena, marcus, etc.)'),
        sa.Column('interaction_id', sa.UUID(), nullable=True, comment='Links to specific conversation interaction'),
        sa.Column('user_id', sa.String(255), nullable=True, comment='Platform user ID (Discord ID, etc.)'),
        sa.Column('conversation_id', sa.UUID(), nullable=True, comment='Groups related interactions'),
        
        # Reflection scores (0.0 - 1.0)
        sa.Column('effectiveness_score', sa.Float(), nullable=True, comment='How effective was the bot response (0.0-1.0)'),
        sa.Column('authenticity_score', sa.Float(), nullable=True, comment='How authentic to character personality (0.0-1.0)'),
        sa.Column('emotional_resonance', sa.Float(), nullable=True, comment='Emotional connection with user (0.0-1.0)'),
        
        # Reflection content
        sa.Column('learning_insight', sa.Text(), nullable=False, comment='What the bot learned from this interaction'),
        sa.Column('improvement_suggestion', sa.Text(), nullable=True, comment='How the bot could improve'),
        sa.Column('interaction_context', sa.Text(), nullable=True, comment='Summary of the conversation context'),
        sa.Column('bot_response_preview', sa.Text(), nullable=True, comment='Preview of bot response being reflected upon'),
        
        # Metadata
        sa.Column('trigger_type', sa.String(50), nullable=True, comment='time_based, high_emotion, user_feedback, abandonment, etc.'),
        sa.Column('reflection_category', sa.String(100), nullable=True, comment='Categorizes type of learning (emotional_handling, topic_expertise, etc.)'),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')),
        
        sa.PrimaryKeyConstraint('id')
    )
    
    # Create indexes for common query patterns
    op.create_index('idx_bot_self_reflections_bot_name', 'bot_self_reflections', ['bot_name'])
    op.create_index('idx_bot_self_reflections_user_id', 'bot_self_reflections', ['user_id'])
    op.create_index('idx_bot_self_reflections_created_at', 'bot_self_reflections', ['created_at'])
    op.create_index('idx_bot_self_reflections_trigger_type', 'bot_self_reflections', ['trigger_type'])
    op.create_index('idx_bot_self_reflections_category', 'bot_self_reflections', ['reflection_category'])
    op.create_index('idx_bot_self_reflections_scores', 'bot_self_reflections', ['effectiveness_score', 'authenticity_score'])
    
    # Add table comment
    op.execute("""
        COMMENT ON TABLE bot_self_reflections IS 
        'Stores bot self-reflection insights for character learning and evolution. 
        Part of hybrid storage architecture (PostgreSQL + Qdrant + InfluxDB).
        Generated by enrichment worker via async analysis.';
    """)


def downgrade() -> None:
    """Revert migration changes."""
    op.drop_index('idx_bot_self_reflections_scores', table_name='bot_self_reflections')
    op.drop_index('idx_bot_self_reflections_category', table_name='bot_self_reflections')
    op.drop_index('idx_bot_self_reflections_trigger_type', table_name='bot_self_reflections')
    op.drop_index('idx_bot_self_reflections_created_at', table_name='bot_self_reflections')
    op.drop_index('idx_bot_self_reflections_user_id', table_name='bot_self_reflections')
    op.drop_index('idx_bot_self_reflections_bot_name', table_name='bot_self_reflections')
    op.drop_table('bot_self_reflections')
