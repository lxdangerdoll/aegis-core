# Multi-Bot Docker Compose Template
# This file is a template that gets populated by scripts/generate_multi_bot_config.py
# DO NOT EDIT: Generated sections will be overwritten

services:
  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:16.4-alpine
    container_name: whisperengine-multi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: whisperengine
      POSTGRES_USER: whisperengine
      POSTGRES_PASSWORD: whisperengine_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whisperengine -d whisperengine"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.4-alpine
    container_name: whisperengine-multi-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: whisperengine-multi-qdrant
    restart: unless-stopped
    ports:
      - "6334:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - bot_network
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:6333/ || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # ===== WEB INTERFACE =====
  whisperengine-web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: whisperengine-web-interface
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://whisperengine:whisperengine_password@postgres:5432/whisperengine
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - WEB_UI_HOST=0.0.0.0
      - WEB_UI_PORT=8080
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
    networks:
      - bot_network
    volumes:
      - ./characters:/app/characters:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== SHARED BOT IMAGE BUILD =====
  whisperengine-bot-builder:
    build:
      context: .
      dockerfile: Dockerfile.bundled-models
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    profiles:
      - build-only
    # This service is only used for building the shared image
    # It doesn't run as a container - just builds the image

  # ===== BOT SERVICES (populated dynamically) =====
  jake-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-jake-bot
    restart: unless-stopped
    env_file:
      - .env.jake
    environment:
      - DISCORD_BOT_NAME=Jake
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9097
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/jake.json
    ports:
      - "9097:9097"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "jake-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9097/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - jake_backups:/app/backups
      - jake_privacy:/app/privacy
      - jake_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  marcus-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-marcus-bot
    restart: unless-stopped
    env_file:
      - .env.marcus
    environment:
      - DISCORD_BOT_NAME=Marcus
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9092
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/marcus.json
    ports:
      - "9092:9092"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "marcus-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9092/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - marcus_backups:/app/backups
      - marcus_privacy:/app/privacy
      - marcus_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  dream-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-dream-bot
    restart: unless-stopped
    env_file:
      - .env.dream
    environment:
      - DISCORD_BOT_NAME=Dream
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9094
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/dream.json
    ports:
      - "9094:9094"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "dream-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9094/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - dream_backups:/app/backups
      - dream_privacy:/app/privacy
      - dream_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  elena-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-elena-bot
    restart: unless-stopped
    env_file:
      - .env.elena
    environment:
      - DISCORD_BOT_NAME=Elena
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9091
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/elena.json
    ports:
      - "9091:9091"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "elena-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9091/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - elena_backups:/app/backups
      - elena_privacy:/app/privacy
      - elena_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  aethys-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-aethys-bot
    restart: unless-stopped
    env_file:
      - .env.aethys
    environment:
      - DISCORD_BOT_NAME=Aethys
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=3007
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/aethys.json
    ports:
      - "3007:3007"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "aethys-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:3007/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - aethys_backups:/app/backups
      - aethys_privacy:/app/privacy
      - aethys_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  ryan-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-ryan-bot
    restart: unless-stopped
    env_file:
      - .env.ryan
    environment:
      - DISCORD_BOT_NAME=Ryan
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9093
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/ryan.json
    ports:
      - "9093:9093"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "ryan-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9093/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ryan_backups:/app/backups
      - ryan_privacy:/app/privacy
      - ryan_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  gabriel-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-gabriel-bot
    restart: unless-stopped
    env_file:
      - .env.gabriel
    environment:
      - DISCORD_BOT_NAME=Gabriel
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9095
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/gabriel.json
    ports:
      - "9095:9095"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "gabriel-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9095/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - gabriel_backups:/app/backups
      - gabriel_privacy:/app/privacy
      - gabriel_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

  sophia-bot:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-sophia-bot
    restart: unless-stopped
    env_file:
      - .env.sophia
    environment:
      - DISCORD_BOT_NAME=Sophia
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
      - MODEL_CACHE_DIR=/app/models
      - DISABLE_MODEL_DOWNLOAD=true
      - HF_HUB_OFFLINE=false
      - TRANSFORMERS_OFFLINE=0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG_MODE=false
      - PYTHONUNBUFFERED=1
      - HEALTH_CHECK_PORT=9096
      - HEALTH_CHECK_HOST=0.0.0.0
      - CDL_DEFAULT_CHARACTER=characters/examples/sophia.json
    ports:
      - "9096:9096"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "sophia-{.ImageName}-{.Name}-{.ID}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "2.0"
    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://localhost:9096/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - sophia_backups:/app/backups
      - sophia_privacy:/app/privacy
      - sophia_temp:/app/temp
      - ./sql:/app/sql:ro
      # Live code mounting for development (no rebuild needed)
      - ./src:/app/src
      - ./scripts:/app/scripts
      - ./characters:/app/characters
      - ./config:/app/config
      - ./validate_config.py:/app/validate_config.py
      - ./run.py:/app/run.py
      - ./env_manager.py:/app/env_manager.py
      # Note: Using Docker logging instead of mounted log volumes
    networks:
      - bot_network
    depends_on:
      - postgres
      - redis
      - qdrant

# ===== NETWORKS =====
networks:
  bot_network:
    name: whisperengine-multi_bot_network
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    name: whisperengine-multi_postgres_data
  redis_data:
    name: whisperengine-multi_redis_data
  qdrant_data:
    name: whisperengine-multi_qdrant_data
  
  # Bot-specific volumes (populated dynamically)
  jake_backups:
    name: whisperengine-multi_jake_backups
  jake_privacy:
    name: whisperengine-multi_jake_privacy
  jake_temp:
    name: whisperengine-multi_jake_temp
  jake_logs:
    name: whisperengine-multi_jake_logs
  marcus_backups:
    name: whisperengine-multi_marcus_backups
  marcus_privacy:
    name: whisperengine-multi_marcus_privacy
  marcus_temp:
    name: whisperengine-multi_marcus_temp
  marcus_logs:
    name: whisperengine-multi_marcus_logs
  dream_backups:
    name: whisperengine-multi_dream_backups
  dream_privacy:
    name: whisperengine-multi_dream_privacy
  dream_temp:
    name: whisperengine-multi_dream_temp
  dream_logs:
    name: whisperengine-multi_dream_logs
  elena_backups:
    name: whisperengine-multi_elena_backups
  elena_privacy:
    name: whisperengine-multi_elena_privacy
  elena_temp:
    name: whisperengine-multi_elena_temp
  elena_logs:
    name: whisperengine-multi_elena_logs
  aethys_backups:
    name: whisperengine-multi_aethys_backups
  aethys_privacy:
    name: whisperengine-multi_aethys_privacy
  aethys_temp:
    name: whisperengine-multi_aethys_temp
  aethys_logs:
    name: whisperengine-multi_aethys_logs
  ryan_backups:
    name: whisperengine-multi_ryan_backups
  ryan_privacy:
    name: whisperengine-multi_ryan_privacy
  ryan_temp:
    name: whisperengine-multi_ryan_temp
  ryan_logs:
    name: whisperengine-multi_ryan_logs
  gabriel_backups:
    name: whisperengine-multi_gabriel_backups
  gabriel_privacy:
    name: whisperengine-multi_gabriel_privacy
  gabriel_temp:
    name: whisperengine-multi_gabriel_temp
  gabriel_logs:
    name: whisperengine-multi_gabriel_logs
  sophia_backups:
    name: whisperengine-multi_sophia_backups
  sophia_privacy:
    name: whisperengine-multi_sophia_privacy
  sophia_temp:
    name: whisperengine-multi_sophia_temp
  sophia_logs:
    name: whisperengine-multi_sophia_logs