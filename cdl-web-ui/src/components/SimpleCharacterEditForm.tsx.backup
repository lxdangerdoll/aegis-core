'use client''use client'



import { useState, useEffect } from 'react'import { useState, useEffect } from 'react'

import { Character } from '@/types/cdl'import { Character } from '@/types/cdl'



interface SimpleCharacterEditFormProps {interface SimpleCharacterEditFormProps {

  character: Character  character: Character

}}



export default function SimpleCharacterEditForm({ character }: SimpleCharacterEditFormProps) {export default function SimpleCharacterEditForm({ character }: SimpleCharacterEditFormProps) {

  const [activeTab, setActiveTab] = useState('basic')  const [activeTab, setActiveTab] = useState('basic')

  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle')  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle')

    

  // Basic character data  // Basic character data

  const [basicData, setBasicData] = useState(() => {  const [basicData, setBasicData] = useState(() => {

    const cdl = character.cdl_data as Record<string, unknown>    const cdl = character.cdl_data as Record<string, unknown>

    const identity = cdl?.identity as Record<string, unknown> | undefined    const identity = cdl?.identity as Record<string, unknown> | undefined

        

    return {    return {

      name: character.name,      name: character.name,

      occupation: character.occupation || '',      occupation: character.occupation || '',

      description: character.description || '',      description: character.description || '',

      location: (identity?.location as string) || character.location || '',      location: (identity?.location as string) || character.location || '',

      character_archetype: character.character_archetype,      character_archetype: character.character_archetype,

      allow_full_roleplay_immersion: character.allow_full_roleplay_immersion      allow_full_roleplay_immersion: character.allow_full_roleplay_immersion

    }    }

  })  })



  // Personality data  // Personality data

  const [personalityData, setPersonalityData] = useState({  const [personalityData, setPersonalityData] = useState({

    big_five: {    big_five: {

      openness: 0.5,      openness: 0.5,

      conscientiousness: 0.5,      conscientiousness: 0.5,

      extraversion: 0.5,      extraversion: 0.5,

      agreeableness: 0.5,      agreeableness: 0.5,

      neuroticism: 0.5      neuroticism: 0.5

    },    },

    values: [] as string[]    values: [] as string[]

  })  })

  

  const [newValue, setNewValue] = useState('')  // Configuration states

  

  useEffect(() => {  const [newValue, setNewValue] = useState('')

    loadCharacterData()

  }, [character.id])  useEffect(() => {

    loadCharacterData()

  // Update basicData when character prop changes  }, [character.id])

  useEffect(() => {

    const cdl = character.cdl_data as Record<string, unknown>  // Update basicData when character prop changes

    const identity = cdl?.identity as Record<string, unknown> | undefined  useEffect(() => {

        const cdl = character.cdl_data as Record<string, unknown>

    setBasicData({    const identity = cdl?.identity as Record<string, unknown> | undefined

      name: character.name,    

      occupation: character.occupation || '',    setBasicData({

      description: character.description || '',      name: character.name,

      location: (identity?.location as string) || character.location || '',      occupation: character.occupation || '',

      character_archetype: character.character_archetype,      description: character.description || '',

      allow_full_roleplay_immersion: character.allow_full_roleplay_immersion      location: (identity?.location as string) || character.location || '',

    })      character_archetype: character.character_archetype,

  }, [character])      allow_full_roleplay_immersion: character.allow_full_roleplay_immersion

    })

  const loadCharacterData = () => {  }, [character])

    // Load personality data from CDL

    if (character.cdl_data) {  const loadCharacterData = () => {

      const cdl = character.cdl_data as Record<string, unknown>    // Load personality data from CDL

      const personality = cdl.personality as Record<string, unknown> | undefined    if (character.cdl_data) {

      if (personality?.big_five) {      const cdl = character.cdl_data as Record<string, unknown>

        setPersonalityData(prev => ({      const personality = cdl.personality as Record<string, unknown> | undefined

          ...prev,      if (personality?.big_five) {

          big_five: personality.big_five as typeof prev.big_five        setPersonalityData(prev => ({

        }))          ...prev,

      }          big_five: personality.big_five as typeof prev.big_five

      if (personality?.values && Array.isArray(personality.values)) {        }))

        setPersonalityData(prev => ({      }

          ...prev,      if (personality?.values && Array.isArray(personality.values)) {

          values: personality.values as string[]        setPersonalityData(prev => ({

        }))          ...prev,

      }          values: personality.values as string[]

    }        }))

  }      }

    }

  const handleSave = async () => {  }

    setSaveStatus('saving')

      const loadCharacterConfigs = async () => {

    try {    try {

      const cdlData = {      const response = await fetch(`/api/characters/${character.id}/config`)

        identity: {      if (response.ok) {

          name: basicData.name,        const data = await response.json()

          occupation: basicData.occupation,        if (data.success) {

          description: basicData.description,          setLlmConfig(data.llm_config || {

          location: basicData.location            llm_client_type: 'openrouter',

        },            llm_chat_api_url: 'https://openrouter.ai/api/v1',

        personality: personalityData,            llm_chat_model: 'anthropic/claude-3-haiku',

        allow_full_roleplay_immersion: basicData.allow_full_roleplay_immersion            llm_temperature: 0.7,

      }            llm_max_tokens: 4000

          })

      const response = await fetch(`/api/characters/${character.id}`, {          setDiscordConfig(data.discord_config || {

        method: 'PUT',            enable_discord: false,

        headers: {            discord_status: 'online',

          'Content-Type': 'application/json',            discord_activity_name: 'conversations'

        },          })

        body: JSON.stringify({          setDeploymentConfig(data.deployment_config || {

          ...basicData,            docker_image: 'whisperengine-bot:latest',

          cdl_data: cdlData            memory_limit: '512m',

        }),            cpu_limit: '0.5',

      })            deployment_status: 'inactive'

          })

      if (response.ok) {        }

        setSaveStatus('saved')      }

        setTimeout(() => setSaveStatus('idle'), 3000)    } catch (error) {

      } else {      console.error('Failed to load character configurations:', error)

        setSaveStatus('error')    }

        setTimeout(() => setSaveStatus('idle'), 5000)  }

      }

    } catch (error) {  const handleSave = async () => {

      console.error('Error saving character:', error)    setSaveStatus('saving')

      setSaveStatus('error')    

      setTimeout(() => setSaveStatus('idle'), 5000)    try {

    }      // Save character basic data and personality

  }      const characterResponse = await fetch(`/api/characters/${character.id}`, {

        method: 'PUT',

  const addValue = () => {        headers: { 'Content-Type': 'application/json' },

    if (newValue.trim() && !personalityData.values.includes(newValue.trim())) {        body: JSON.stringify({

      setPersonalityData(prev => ({          ...basicData,

        ...prev,          cdl_data: {

        values: [...prev.values, newValue.trim()]            identity: {

      }))              name: basicData.name,

      setNewValue('')              occupation: basicData.occupation,

    }              description: basicData.description,

  }              location: basicData.location

            },

  const removeValue = (valueToRemove: string) => {            personality: personalityData

    setPersonalityData(prev => ({          }

      ...prev,        })

      values: prev.values.filter(value => value !== valueToRemove)      })

    }))

  }      // Save configurations

      const configResponse = await fetch(`/api/characters/${character.id}/config`, {

  const tabs = [        method: 'POST',

    { id: 'basic', name: 'Basic Info' },        headers: { 'Content-Type': 'application/json' },

    { id: 'personality', name: 'Personality' }        body: JSON.stringify({

  ]          llm_config: llmConfig,

          discord_config: discordConfig,

  return (          deployment_config: deploymentConfig

    <div className="space-y-6">        })

      {/* Save Status */}      })

      {saveStatus !== 'idle' && (

        <div className={`p-4 rounded-lg ${      if (characterResponse.ok && configResponse.ok) {

          saveStatus === 'saving' ? 'bg-blue-50 text-blue-700' :        setSaveStatus('saved')

          saveStatus === 'saved' ? 'bg-green-50 text-green-700' :        setTimeout(() => setSaveStatus('idle'), 3000)

          'bg-red-50 text-red-700'      } else {

        }`}>        setSaveStatus('error')

          {saveStatus === 'saving' && 'Saving character...'}      }

          {saveStatus === 'saved' && 'Character saved successfully!'}    } catch (error) {

          {saveStatus === 'error' && 'Error saving character. Please try again.'}      setSaveStatus('error')

        </div>      console.error('Error saving character:', error)

      )}    }

  }

      {/* Tab Navigation */}

      <div className="border-b border-gray-200">  const addValue = () => {

        <nav className="-mb-px flex space-x-8">    if (newValue.trim() && !personalityData.values.includes(newValue.trim())) {

          {tabs.map((tab) => (      setPersonalityData(prev => ({

            <button        ...prev,

              key={tab.id}        values: [...prev.values, newValue.trim()]

              onClick={() => setActiveTab(tab.id)}      }))

              className={`py-2 px-1 border-b-2 font-medium text-sm ${      setNewValue('')

                activeTab === tab.id    }

                  ? 'border-blue-500 text-blue-600'  }

                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'

              }`}  const removeValue = (valueToRemove: string) => {

            >    setPersonalityData(prev => ({

              {tab.name}      ...prev,

            </button>      values: prev.values.filter(v => v !== valueToRemove)

          ))}    }))

        </nav>  }

      </div>

  const tabs = [

      {/* Tab Content */}    { id: 'basic', name: 'Basic Info' },

      <div className="bg-white rounded-lg shadow p-6">    { id: 'personality', name: 'Personality' }

        {/* Basic Info Tab */}  ]

        {activeTab === 'basic' && (

          <div className="space-y-4">  return (

            <h3 className="text-lg font-medium text-gray-900 mb-4">Basic Information</h3>    <div className="space-y-6">

                  {/* Save Status */}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">      {saveStatus !== 'idle' && (

              <div>        <div className={`p-4 rounded-lg ${

                <label className="block text-sm font-medium text-gray-900 mb-2">Name</label>          saveStatus === 'saving' ? 'bg-blue-50 text-blue-700' :

                <input          saveStatus === 'saved' ? 'bg-green-50 text-green-700' :

                  type="text"          'bg-red-50 text-red-700'

                  value={basicData.name}        }`}>

                  onChange={(e) => setBasicData(prev => ({ ...prev, name: e.target.value }))}          {saveStatus === 'saving' && 'Saving character...'}

                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"          {saveStatus === 'saved' && 'Character saved successfully!'}

                />          {saveStatus === 'error' && 'Error saving character. Please try again.'}

              </div>        </div>

                    )}

              <div>

                <label className="block text-sm font-medium text-gray-900 mb-2">Occupation</label>      {/* Tab Navigation */}

                <input      <div className="border-b border-gray-200">

                  type="text"        <nav className="-mb-px flex space-x-8">

                  value={basicData.occupation}          {tabs.map((tab) => (

                  onChange={(e) => setBasicData(prev => ({ ...prev, occupation: e.target.value }))}            <button

                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"              key={tab.id}

                />              onClick={() => setActiveTab(tab.id)}

              </div>              className={`py-2 px-1 border-b-2 font-medium text-sm ${

                              activeTab === tab.id

              <div>                  ? 'border-blue-500 text-blue-600'

                <label className="block text-sm font-medium text-gray-900 mb-2">Location</label>                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'

                <input              }`}

                  type="text"            >

                  value={basicData.location}              {tab.name}

                  onChange={(e) => setBasicData(prev => ({ ...prev, location: e.target.value }))}            </button>

                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"          ))}

                />        </nav>

              </div>      </div>

              

              <div>      {/* Tab Content */}

                <label className="block text-sm font-medium text-gray-900 mb-2">Character Type</label>      <div className="bg-white rounded-lg shadow p-6">

                <select        {/* Basic Info Tab */}

                  value={basicData.character_archetype}        {activeTab === 'basic' && (

                  onChange={(e) => setBasicData(prev => ({ ...prev, character_archetype: e.target.value as any }))}          <div className="space-y-4">

                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"            <h3 className="text-lg font-medium text-gray-900 mb-4">Basic Information</h3>

                >            

                  <option value="real-world">Real-world (honest about AI)</option>            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                  <option value="fantasy">Fantasy (full roleplay)</option>              <div>

                  <option value="narrative-ai">Narrative AI (AI is part of story)</option>                <label className="block text-sm font-medium text-gray-900 mb-2">Name</label>

                </select>                <input

              </div>                  type="text"

            </div>                  value={basicData.name}

                              onChange={(e) => setBasicData(prev => ({ ...prev, name: e.target.value }))}

            <div>                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

              <label className="block text-sm font-medium text-gray-900 mb-2">Description</label>                />

              <textarea              </div>

                value={basicData.description}              

                onChange={(e) => setBasicData(prev => ({ ...prev, description: e.target.value }))}              <div>

                rows={3}                <label className="block text-sm font-medium text-gray-900 mb-2">Occupation</label>

                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"                <input

              />                  type="text"

            </div>                  value={basicData.occupation}

                  onChange={(e) => setBasicData(prev => ({ ...prev, occupation: e.target.value }))}

            <div className="flex items-center">                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

              <input                />

                type="checkbox"              </div>

                checked={basicData.allow_full_roleplay_immersion}              

                onChange={(e) => setBasicData(prev => ({ ...prev, allow_full_roleplay_immersion: e.target.checked }))}              <div>

                className="mr-2"                <label className="block text-sm font-medium text-gray-900 mb-2">Location</label>

              />                <input

              <label className="text-sm font-medium text-gray-900">Allow full roleplay immersion</label>                  type="text"

            </div>                  value={basicData.location}

          </div>                  onChange={(e) => setBasicData(prev => ({ ...prev, location: e.target.value }))}

        )}                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

                />

        {/* Personality Tab */}              </div>

        {activeTab === 'personality' && (              

          <div className="space-y-6">              <div>

            <h3 className="text-lg font-medium text-gray-900 mb-4">Personality Configuration</h3>                <label className="block text-sm font-medium text-gray-900 mb-2">Character Type</label>

                            <select

            {/* Big Five Traits */}                  value={basicData.character_archetype}

            <div>                  onChange={(e) => setBasicData(prev => ({ ...prev, character_archetype: e.target.value as 'real-world' | 'fantasy' | 'narrative-ai' }))}

              <h4 className="text-md font-medium text-gray-900 mb-4">Big Five Personality Traits</h4>                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

              <div className="space-y-4">                >

                {Object.entries(personalityData.big_five).map(([trait, value]) => (                  <option value="real-world">Real-world</option>

                  <div key={trait}>                  <option value="fantasy">Fantasy</option>

                    <label className="block text-sm font-medium text-gray-900 mb-2 capitalize">                  <option value="narrative-ai">Narrative AI</option>

                      {trait}: {value}                </select>

                    </label>              </div>

                    <input            </div>

                      type="range"            

                      min="0"            <div>

                      max="1"              <label className="block text-sm font-medium text-gray-900 mb-2">Description</label>

                      step="0.1"              <textarea

                      value={value}                value={basicData.description}

                      onChange={(e) => setPersonalityData(prev => ({                onChange={(e) => setBasicData(prev => ({ ...prev, description: e.target.value }))}

                        ...prev,                rows={4}

                        big_five: {                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

                          ...prev.big_five,              />

                          [trait]: parseFloat(e.target.value)            </div>

                        }

                      }))}            <div className="flex items-center">

                      className="w-full"              <input

                    />                type="checkbox"

                  </div>                checked={basicData.allow_full_roleplay_immersion}

                ))}                onChange={(e) => setBasicData(prev => ({ ...prev, allow_full_roleplay_immersion: e.target.checked }))}

              </div>                className="mr-2"

            </div>              />

              <label className="text-sm font-medium text-gray-900">Allow full roleplay immersion</label>

            {/* Core Values */}            </div>

            <div>          </div>

              <h4 className="text-md font-medium text-gray-900 mb-4">Core Values</h4>        )}

              <div className="flex gap-2 mb-4">

                <input        {/* Personality Tab */}

                  type="text"        {activeTab === 'personality' && (

                  value={newValue}          <div className="space-y-6">

                  onChange={(e) => setNewValue(e.target.value)}            <h3 className="text-lg font-medium text-gray-900 mb-4">Personality Configuration</h3>

                  onKeyDown={(e) => e.key === 'Enter' && addValue()}            

                  placeholder="Add a core value..."            {/* Big Five Traits */}

                  className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"            <div>

                />              <h4 className="text-md font-medium text-gray-900 mb-4">Big Five Personality Traits</h4>

                <button              <div className="space-y-4">

                  onClick={addValue}                {Object.entries(personalityData.big_five).map(([trait, value]) => (

                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"                  <div key={trait}>

                >                    <label className="block text-sm font-medium text-gray-900 mb-2 capitalize">

                  Add                      {trait} ({Number(value).toFixed(1)})

                </button>                    </label>

              </div>                    <input

              <div className="flex flex-wrap gap-2">                      type="range"

                {personalityData.values.map((value, index) => (                      min="0"

                  <span                      max="1"

                    key={index}                      step="0.1"

                    className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"                      value={value}

                  >                      onChange={(e) => setPersonalityData(prev => ({

                    {value}                        ...prev,

                    <button                        big_five: { ...prev.big_five, [trait]: parseFloat(e.target.value) }

                      onClick={() => removeValue(value)}                      }))}

                      className="ml-2 text-blue-600 hover:text-blue-800"                      className="w-full"

                    >                    />

                      ×                  </div>

                    </button>                ))}

                  </span>              </div>

                ))}            </div>

              </div>

            </div>            {/* Core Values */}

          </div>            <div>

        )}              <h4 className="text-md font-medium text-gray-900 mb-4">Core Values</h4>

      </div>              

              <div className="flex gap-2 mb-4">

      {/* Save Button */}                <input

      <div className="flex justify-end">                  type="text"

        <button                  value={newValue}

          onClick={handleSave}                  onChange={(e) => setNewValue(e.target.value)}

          disabled={saveStatus === 'saving'}                  placeholder="Add new value..."

          className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"                  className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"

        >                  onKeyPress={(e) => e.key === 'Enter' && addValue()}

          {saveStatus === 'saving' ? 'Saving...' : 'Save Changes'}                />

        </button>                <button

      </div>                  onClick={addValue}

    </div>                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"

  )                >

}                  Add
                </button>
              </div>

              <div className="flex flex-wrap gap-2">
                {personalityData.values.map((value) => (
                  <span key={value} className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded flex items-center">
                    {value}
                    <button
                      onClick={() => removeValue(value)}
                      className="ml-2 text-blue-600 hover:text-blue-800"
                    >
                      ×
                    </button>
                  </span>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* LLM Config Tab */}
        {activeTab === 'llm' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 mb-4">LLM Configuration</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-2">Provider</label>
                <select
                  value={llmConfig.llm_client_type || 'openrouter'}
                  onChange={(e) => {
                    const newProvider = e.target.value;
                    setLlmConfig(prev => ({ ...prev, llm_client_type: newProvider }));
                    
                    // Auto-populate API URL based on provider
                    const providerUrls: Record<string, string> = {
                      'openai': 'https://api.openai.com/v1',
                      'openrouter': 'https://openrouter.ai/api/v1',
                      'lmstudio': 'http://localhost:1234/v1',
                      'ollama': 'http://localhost:11434/api'
                    };
                    
                    if (providerUrls[newProvider]) {
                      setLlmConfig(prev => ({ ...prev, llm_chat_api_url: providerUrls[newProvider] }));
                    }
                  }}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                >
                  <option value="openrouter">OpenRouter</option>
                  <option value="openai">OpenAI</option>
                  <option value="lmstudio">LM Studio</option>
                  <option value="ollama">Ollama</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-2">Model</label>
                <input
                  type="text"
                  value={llmConfig.llm_chat_model || ''}
                  onChange={(e) => setLlmConfig(prev => ({ ...prev, llm_chat_model: e.target.value }))}
                  placeholder="e.g., gpt-4, meta-llama/llama-3.1-8b-instruct"
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                />
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-900 mb-2">API URL</label>
                <input
                  type="url"
                  value={llmConfig.llm_chat_api_url || ''}
                  onChange={(e) => setLlmConfig(prev => ({ ...prev, llm_chat_api_url: e.target.value }))}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                />
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-900 mb-2">API Key</label>
                <input
                  type="password"
                  value={llmConfig.llm_chat_api_key || ''}
                  onChange={(e) => setLlmConfig(prev => ({ ...prev, llm_chat_api_key: e.target.value }))}
                  placeholder="Enter API key"
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-2">
                  Temperature ({llmConfig.llm_temperature || 0.7})
                </label>
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={llmConfig.llm_temperature || 0.7}
                  onChange={(e) => setLlmConfig(prev => ({ ...prev, llm_temperature: parseFloat(e.target.value) }))}
                  className="w-full"
                />
              </div>
            </div>
          </div>
        )}

        {/* Discord Config Tab */}
        {activeTab === 'discord' && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Discord Configuration</h3>
            
            <div className="flex items-center mb-4">
              <input
                type="checkbox"
                checked={discordConfig.enable_discord || false}
                onChange={(e) => setDiscordConfig(prev => ({ ...prev, enable_discord: e.target.checked }))}
                className="mr-2"
              />
              <label className="text-sm font-medium text-gray-900">Enable Discord Integration</label>
            </div>

            {discordConfig.enable_discord && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-900 mb-2">Discord Bot Token</label>
                  <input
                    type="password"
                    value={discordConfig.discord_bot_token || ''}
                    onChange={(e) => setDiscordConfig(prev => ({ ...prev, discord_bot_token: e.target.value }))}
                    placeholder="Enter Discord bot token"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Status</label>
                  <select
                    value={discordConfig.discord_status || 'online'}
                    onChange={(e) => setDiscordConfig(prev => ({ ...prev, discord_status: e.target.value as 'online' | 'idle' | 'dnd' | 'invisible' }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  >
                    <option value="online">Online</option>
                    <option value="idle">Idle</option>
                    <option value="dnd">Do Not Disturb</option>
                    <option value="invisible">Invisible</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Activity Name</label>
                  <input
                    type="text"
                    value={discordConfig.discord_activity_name || ''}
                    onChange={(e) => setDiscordConfig(prev => ({ ...prev, discord_activity_name: e.target.value }))}
                    placeholder="conversations"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                </div>
              </div>
            )}
          </div>
        )}

        {/* Deployment Config Tab */}
        {activeTab === 'deployment' && (
          <div className="space-y-6">
            {/* Deployment Management */}
            <DeploymentManager character={character} />
            
            {/* Advanced Deployment Configuration */}
            <div className="bg-gray-50 rounded-lg p-6">
              <h4 className="text-lg font-medium text-gray-900 mb-4">Advanced Configuration</h4>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Docker Image</label>
                  <input
                    type="text"
                    value={deploymentConfig.docker_image || 'whisperengine-bot:latest'}
                    onChange={(e) => setDeploymentConfig(prev => ({ ...prev, docker_image: e.target.value }))}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                  <p className="text-xs text-gray-500 mt-1">Container image to use for deployment</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Memory Limit</label>
                  <input
                    type="text"
                    value={deploymentConfig.memory_limit || '2G'}
                    onChange={(e) => setDeploymentConfig(prev => ({ ...prev, memory_limit: e.target.value }))}
                    placeholder="2G"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                  <p className="text-xs text-gray-500 mt-1">Memory allocation (e.g., 2G, 512M)</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">CPU Limit</label>
                  <input
                    type="text"
                    value={deploymentConfig.cpu_limit || '2.0'}
                    onChange={(e) => setDeploymentConfig(prev => ({ ...prev, cpu_limit: e.target.value }))}
                    placeholder="2.0"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                  <p className="text-xs text-gray-500 mt-1">CPU cores (e.g., 2.0, 0.5)</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Auto-Start</label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={deploymentConfig.auto_start || false}
                      onChange={(e) => setDeploymentConfig(prev => ({ ...prev, auto_start: e.target.checked }))}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Start automatically on platform startup</span>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Enabled</label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={deploymentConfig.enabled !== false}
                      onChange={(e) => setDeploymentConfig(prev => ({ ...prev, enabled: e.target.checked }))}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">Enable deployment for this character</span>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-900 mb-2">Port (Optional)</label>
                  <input
                    type="number"
                    value={deploymentConfig.port || ''}
                    onChange={(e) => setDeploymentConfig(prev => ({ ...prev, port: e.target.value ? parseInt(e.target.value) : undefined }))}
                    placeholder="Auto-assigned"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  />
                  <p className="text-xs text-gray-500 mt-1">Leave empty for auto-assignment</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <button
          onClick={handleSave}
          disabled={saveStatus === 'saving'}
          className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {saveStatus === 'saving' ? 'Saving...' : 'Save Changes'}
        </button>
      </div>
    </div>
  )
}