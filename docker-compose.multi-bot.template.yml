# Multi-Bot Docker Compose Template
# This file is a template that gets populated by scripts/generate_multi_bot_config.py
# DO NOT EDIT: Generated sections will be overwritten
#
# Port Strategy:
# - Development Environment (multi-bot.sh): 5000-5999 + 9000-9999 range
# - End-User Environment (quickstart): 8000-8999 range
# - Docker Networks: whisperengine-multi_bot_network (dev) vs whisperengine-quickstart-network (end-user)

services:
  # ===== DATABASE MIGRATION INIT CONTAINER =====
  # Runs once before bot services start to ensure schema is up-to-date
  db-migrate:
    image: whisperengine-bot:${VERSION:-latest}
    container_name: whisperengine-db-migrate
    entrypoint: []  # Override entrypoint to prevent main app startup
    command: ["python", "/app/scripts/run_migrations.py"]
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=whisperengine
      - POSTGRES_PASSWORD=whisperengine_password
      - POSTGRES_DB=whisperengine
    volumes:
      - ./scripts:/app/scripts  # Live mount for migration scripts
      - ./sql:/app/sql:ro       # Live mount for SQL files
    networks:
      - bot_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"  # Only run once per docker-compose up

  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:16.4-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: whisperengine
      POSTGRES_USER: whisperengine
      POSTGRES_PASSWORD: whisperengine_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"  # PostgreSQL (Dev: 5433, Quickstart: 8432)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whisperengine -d whisperengine"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis - Commented out since we're using vector-native memory with Qdrant only
  # redis:
  #   image: redis:7.4-alpine
  #   container_name: whisperengine-multi-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6380:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - bot_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6334:6333"  # Qdrant (Dev: 6334, Quickstart: 8333)
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - bot_network
    # Health check disabled - Qdrant containers have minimal tooling
    # Bots will retry connections if Qdrant isn't ready yet

  influxdb:
    image: influxdb:2.7-alpine
    container_name: influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: whisperengine
      DOCKER_INFLUXDB_INIT_PASSWORD: whisperengine_metrics
      DOCKER_INFLUXDB_INIT_ORG: whisperengine
      DOCKER_INFLUXDB_INIT_BUCKET: performance_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: whisperengine-fidelity-first-metrics-token
    ports:
      - "8087:8086"  # InfluxDB (Dev: 8087, Quickstart: 8088)
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Grafana monitoring dashboard for development environment
  grafana:
    image: grafana/grafana:11.3.0
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-whisperengine_grafana}
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
      INFLUXDB_USER: whisperengine
      INFLUXDB_PASSWORD: whisperengine_metrics
    ports:
      - "3002:3000"  # Grafana (Dev: 3002, Quickstart: 8001)
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-config/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./grafana-config/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - bot_network
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CDL Web UI for character authoring and management
  cdl-web-ui:
    build:
      context: ./cdl-web-ui
      dockerfile: Dockerfile
    container_name: cdl-web-ui
    restart: unless-stopped
    environment:
      # PostgreSQL connection (same as WhisperEngine bots)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: whisperengine
      POSTGRES_USER: whisperengine
      POSTGRES_PASSWORD: whisperengine_password
      # Legacy PG* variables for compatibility
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: whisperengine
      PGUSER: whisperengine
      PGPASSWORD: whisperengine_password
      # Next.js configuration
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3001:3000"  # CDL Web UI (Dev: 3001, Quickstart: 8080)
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== SHARED BOT IMAGE BUILD =====
  whisperengine-bot-builder:
    build:
      context: .
      dockerfile: Dockerfile.bundled-models
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    profiles:
      - build-only
    # This service is only used for building the shared image
    # It doesn't run as a container - just builds the image

  # ===== BOT SERVICES (populated dynamically) =====
  # BOT_SERVICES_PLACEHOLDER

# ===== NETWORKS =====
networks:
  bot_network:
    name: whisperengine-multi_bot_network
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    name: whisperengine-multi_postgres_data
  # redis_data:  # Commented out - using vector-native memory only
  #   name: whisperengine-multi_redis_data
  qdrant_data:
    name: whisperengine-multi_qdrant_data
  influxdb_data:
    name: whisperengine-multi_influxdb_data
    external: true
  influxdb_config:
    name: whisperengine-multi_influxdb_config
    external: true
  grafana_data:
    name: whisperengine-multi_grafana_data
    external: true
  
  # Shared Hugging Face cache (all bots share to avoid duplicate downloads)
  huggingface_cache:
    name: whisperengine-multi_huggingface_cache
  
  # Bot-specific volumes (populated dynamically)
  # BOT_VOLUMES_PLACEHOLDER