# Multi-Bot Docker Compose Template
# This file is a template that gets populated by scripts/generate_multi_bot_config.py
# DO NOT EDIT: Generated sections will be overwritten

services:
  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:16.4-alpine
    container_name: whisperengine-multi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: whisperengine
      POSTGRES_USER: whisperengine
      POSTGRES_PASSWORD: whisperengine_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whisperengine -d whisperengine"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Commented out since we're using vector-native memory with Qdrant only
  # redis:
  #   image: redis:7.4-alpine
  #   container_name: whisperengine-multi-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6380:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - bot_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: whisperengine-multi-qdrant
    restart: unless-stopped
    ports:
      - "6334:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - bot_network
    # healthcheck:
    #   test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:6333/ || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  influxdb:
    image: influxdb:2.7-alpine
    container_name: whisperengine-multi-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: whisperengine
      DOCKER_INFLUXDB_INIT_PASSWORD: whisperengine_metrics
      DOCKER_INFLUXDB_INIT_ORG: whisperengine
      DOCKER_INFLUXDB_INIT_BUCKET: performance_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: whisperengine-fidelity-first-metrics-token
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CDL Web UI for character authoring and management
  cdl-web-ui:
    build:
      context: ./cdl-web-ui
      dockerfile: Dockerfile
    container_name: whisperengine-cdl-web-ui
    restart: unless-stopped
    environment:
      # PostgreSQL connection (same as WhisperEngine bots)
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: whisperengine
      PGUSER: whisperengine
      PGPASSWORD: whisperengine_password
      # Next.js configuration
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3001:3000"
    depends_on:
      - postgres
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== SHARED BOT IMAGE BUILD =====
  whisperengine-bot-builder:
    build:
      context: .
      dockerfile: Dockerfile.bundled-models
      target: production
    image: whisperengine-bot:${VERSION:-latest}
    profiles:
      - build-only
    # This service is only used for building the shared image
    # It doesn't run as a container - just builds the image

  # ===== BOT SERVICES (populated dynamically) =====
  # BOT_SERVICES_PLACEHOLDER

# ===== NETWORKS =====
networks:
  bot_network:
    name: whisperengine-multi_bot_network
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    name: whisperengine-multi_postgres_data
  # redis_data:  # Commented out - using vector-native memory only
  #   name: whisperengine-multi_redis_data
  qdrant_data:
    name: whisperengine-multi_qdrant_data
  influxdb_data:
    name: whisperengine-multi_influxdb_data
  influxdb_config:
    name: whisperengine-multi_influxdb_config
  
  # Bot-specific volumes (populated dynamically)
  # BOT_VOLUMES_PLACEHOLDER